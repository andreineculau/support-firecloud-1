#!/usr/bin/env bash
# shellcheck disable=SC2034
set -euo pipefail

#- ci-printvars 1.0
## Usage: ci-printvars
## Print SF_CI_* vars in a platform-agnostic way.

SUPPORT_FIRECLOUD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://www.appveyor.com/docs/environment-variables/

function sf_ci_env_appveyor() {
    false || \
        [[ "${APPVEYOR:-}" = "True" ]] || \
        [[ "${APPVEYOR:-}" = "true" ]] || \
        return 0

    if printenv | grep -q "=True$"; then
        # normalize 'True' to 'true'
        while read -r NO_XARGS_R; do
            [[ -n "${NO_XARGS_R}" ]] || continue;
            eval "export ${NO_XARGS_R}=true"
        done < <(printenv | grep "=True$" | sed "s/=.*//g")
    fi

    [[ "${APPVEYOR_REPO_PROVIDER:-}" = "gitHub" ]]

    export CI=true
    SF_CI_NAME=Appveyor
    SF_CI_PLATFORM=appveyor
    SF_CI_SERVER_HOST=${APPVEYOR_URL:-ci.appveyor.com}
    SF_CI_SERVER_HOST=${SF_CI_SERVER_HOST#*://}
    SF_CI_REPO_SLUG=${APPVEYOR_REPO_NAME:-}
    SF_CI_ROOT=${APPVEYOR_BUILD_FOLDER}

    SF_CI_IS_CRON=${APPVEYOR_SCHEDULED_BUILD:-}
    SF_CI_IS_PR=
    [[ -z "${APPVEYOR_PULL_REQUEST_NUMBER:-}" ]] || SF_CI_IS_PR=true

    SF_CI_JOB_ID=${APPVEYOR_JOB_ID:-}
    SF_CI_PIPELINE_ID=${APPVEYOR_BUILD_NUMBER:-}
    # SF_CI_JOB_URL=https://${SF_CI_SERVER_HOST}/project/${APPVEYOR_ACCOUNT_NAME:-}/${APPVEYOR_PROJECT_SLUG:-}/builds/${SF_CI_JOB_ID} # editorconfig-checker-disable-line
    SF_CI_JOB_URL=https://${SF_CI_SERVER_HOST}/project/${APPVEYOR_ACCOUNT_NAME:-}/${APPVEYOR_PROJECT_SLUG:-}/build/job/${SF_CI_JOB_ID} # editorconfig-checker-disable-line
    SF_CI_PIPELINE_URL=https://${SF_CI_SERVER_HOST}/project/${APPVEYOR_ACCOUNT_NAME:-}/${APPVEYOR_PROJECT_SLUG:-}/build/${SF_CI_PIPELINE_ID} # editorconfig-checker-disable-line

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_REPO_URL=https://github.com/${SF_CI_REPO_SLUG}/pull/${APPVEYOR_PULL_REQUEST_NUMBER:-}
        SF_CI_PR_REPO_SLUG=${APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME:-}
        SF_CI_PR_GIT_HASH=${APPVEYOR_PULL_REQUEST_HEAD_COMMIT:-}
        SF_CI_PR_GIT_BRANCH=${APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH:-}
    }

    SF_CI_GIT_HASH=${APPVEYOR_REPO_COMMIT:-}
    SF_CI_GIT_BRANCH=${APPVEYOR_REPO_BRANCH:-}
    SF_CI_GIT_TAG=${APPVEYOR_REPO_TAG_NAME:-}

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
}

function sf_ci_printvars_appveyor() {
    printenv | grep \
        -e "^APPVEYOR[=_]" \
        -e "^CI[=_]" \
        -e "^CONFIGURATION$" \
        -e "^PLATFORM$"
}

function sf_ci_known_env_appveyor() {
    cat <<EOF
CI
APPVEYOR
APPVEYOR_URL
APPVEYOR_API_URL
APPVEYOR_ACCOUNT_NAME
APPVEYOR_PROJECT_ID
APPVEYOR_PROJECT_NAME
APPVEYOR_PROJECT_SLUG
APPVEYOR_BUILD_FOLDER
APPVEYOR_BUILD_ID
APPVEYOR_BUILD_NUMBER
APPVEYOR_BUILD_VERSION
APPVEYOR_BUILD_WORKER_IMAGE
APPVEYOR_PULL_REQUEST_NUMBER
APPVEYOR_PULL_REQUEST_TITLE
APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME
APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH
APPVEYOR_PULL_REQUEST_HEAD_COMMIT
APPVEYOR_JOB_ID
APPVEYOR_JOB_NAME
APPVEYOR_JOB_NUMBER
APPVEYOR_REPO_PROVIDER
APPVEYOR_REPO_SCM
APPVEYOR_REPO_NAME
APPVEYOR_REPO_BRANCH
APPVEYOR_REPO_TAG
APPVEYOR_REPO_TAG_NAME
APPVEYOR_REPO_COMMIT
APPVEYOR_REPO_COMMIT_AUTHOR
APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL
APPVEYOR_REPO_COMMIT_TIMESTAMP
APPVEYOR_REPO_COMMIT_MESSAGE
APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED
APPVEYOR_SCHEDULED_BUILD
APPVEYOR_FORCED_BUILD
APPVEYOR_RE_BUILD
APPVEYOR_RE_RUN_INCOMPLETE
PLATFORM
CONFIGURATION
APPVEYOR_ARTIFACT_UPLOAD_TIMEOUT
APPVEYOR_FILE_DOWNLOAD_TIMEOUT
APPVEYOR_REPOSITORY_SHALLOW_CLONE_TIMEOUT
APPVEYOR_CACHE_ENTRY_UPLOAD_DOWNLOAD_TIMEOUT
APPVEYOR_CACHE_SKIP_RESTORE
APPVEYOR_CACHE_SKIP_SAVE
APPVEYOR_WAP_ARTIFACT_NAME
APPVEYOR_WAP_SKIP_ACLS
APPVEYOR_BUILD_WORKER_IMAGE
APPVEYOR_SKIP_FINALIZE_ON_EXIT
APPVEYOR_SAVE_CACHE_ON_ERROR
APPVEYOR_ACS_DEPLOYMENT_UPGRADE_MODE
APPVEYOR_IGNORE_COMMIT_FILTERING_ON_TAG
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_circle() {
    [[ "${CIRCLECI:-}" = "true" ]] || return 0

    [[ "${CIRCLE_REPOSITORY_URL:-}" =~ github.com ]]

    export CI=true
    SF_CI_NAME=CircleCI
    SF_CI_PLATFORM=circle
    SF_CI_SERVER_HOST=circleci.com
    SF_CI_REPO_SLUG=${CIRCLE_PROJECT_USERNAME:-}/${CIRCLE_PROJECT_REPONAME:-}
    SF_CI_ROOT=${CIRCLE_WORKING_DIRECTORY:-}

    SF_CI_IS_CRON=${SF_CI_IS_CRON:-} # needs to come from .circleci/config.yml
    SF_CI_IS_PR=
    [[ -z "${CIRCLE_PR_NUMBER:-}" ]] || SF_CI_IS_PR=true # only on forked PRs
    [[ -z "${CIRCLE_PULL_REQUEST:-}" ]] || SF_CI_IS_PR=true

    SF_CI_JOB_ID=${CIRCLE_BUILD_NUM:-}
    SF_CI_PIPELINE_ID=${CIRCLE_WORKFLOW_ID:-}
    SF_CI_JOB_URL=${CIRCLE_BUILD_URL:-}
    # see https://discuss.circleci.com/t/add-a-workflow-url-like-the-previous-v1-job-api-job-url-to-the-get-pipeline-pipeline-id-workflow-api/35921 # editorconfig-checker-disable-line
    SF_CI_PIPELINE_URL=https://app.${SF_CI_SERVER_HOST}/pipelines/workflows/${SF_CI_PIPELINE_ID}

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_PR_URL=https://github.com/${SF_CI_REPO_SLUG}/pull/${CIRCLE_PR_NUMBER:-}
        SF_CI_PR_REPO_SLUG=${CIRCLE_PR_USERNAME:-}/${CIRCLE_PR_REPONAME:-}
        SF_CI_PR_GIT_HASH= # TODO
        SF_CI_PR_GIT_BRANCH=${CIRCLE_BRANCH:-}
    }

    SF_CI_GIT_HASH=${CIRCLE_SHA1:-}
    SF_CI_GIT_BRANCH=${CIRCLE_BRANCH:-}
    [[ "${SF_CI_IS_PR}" != "true" ]] || SF_CI_GIT_BRANCH=
    SF_CI_GIT_TAG=${CIRCLE_TAG:-}

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
    export USER=$(whoami)
}

function sf_ci_printvars_circle() {
    printenv | grep \
        -e "^CI[=_]" \
        -e "^CIRCLE[=_]" \
        -e "^CIRCLECI$"
}

function sf_ci_known_env_circle() {
    # see https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables
    cat <<EOF
CI
CIRCLECI
CIRCLE_BRANCH
CIRCLE_BUILD_NUM
CIRCLE_BUILD_URL
CIRCLE_JOB
CIRCLE_NODE_INDEX
CIRCLE_NODE_TOTAL
CIRCLE_PR_NUMBER
CIRCLE_PR_REPONAME
CIRCLE_PR_USERNAME
CIRCLE_PREVIOUS_BUILD_NUM
CIRCLE_PROJECT_REPONAME
CIRCLE_PROJECT_USERNAME
CIRCLE_PULL_REQUEST
CIRCLE_PULL_REQUESTS
CIRCLE_REPOSITORY_URL
CIRCLE_SHA1
CIRCLE_TAG
CIRCLE_USERNAME
CIRCLE_WORKFLOW_ID
CIRCLE_WORKING_DIRECTORY
CIRCLE_INTERNAL_TASK_DATA
CIRCLE_COMPARE_URL
CI_PULL_REQUEST
CI_PULL_REQUESTS
EOF
    # undocumented but observed
    cat <<EOF
CIRCLE_INTERNAL_CONFIG
CIRCLE_INTERNAL_SCRATCH
CIRCLE_SHELL_ENV
CIRCLE_STAGE
CIRCLE_WORKFLOW_JOB_ID
CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS
CIRCLE_WORKFLOW_WORKSPACE_ID
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_cirrus() {
    [[ "${CIRRUS_CI:-}" = "true" ]] || return 0

    [[ "${CIRRUS_REPO_CLONE_HOST:-}" = "github.com" ]]

    export CI=true
    SF_CI_NAME="Cirrus CI"
    SF_CI_PLATFORM=cirrus
    SF_CI_SERVER_HOST=cirrus-ci.com
    SF_CI_REPO_SLUG=${CIRRUS_REPO_FULL_NAME:-}
    SF_CI_ROOT=${CIRRUS_WORKING_DIR:-}

    SF_CI_IS_CRON=
    [[ -z "${CIRRUS_CRON:-}" ]] || SF_CI_IS_CRON=true
    SF_CI_IS_PR=
    [[ -z "${CIRRUS_PR:-}" ]] || SF_CI_IS_PR=true


    SF_CI_JOB_ID=${CIRRUS_TASK_ID:-}
    SF_CI_PIPELINE_ID=${CIRRUS_BUILD_ID:-}
    SF_CI_JOB_URL=https://cirrus-ci.com/task/${SF_CI_JOB_ID}
    SF_CI_PIPELINE_URL=https://cirrus-ci.com/build/${SF_CI_PIPELINE_ID}

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_PR_URL=https://github.com/${SF_CI_REPO_SLUG}/pull/${CIRRUS_PR:-}
        SF_CI_PR_REPO_SLUG= # TODO
        SF_CI_PR_GIT_HASH= # TODO
        SF_CI_PR_GIT_BRANCH=${CIRRUS_BRANCH:-}
    }

    SF_CI_GIT_HASH=${CIRRUS_CHANGE_IN_REPO:-}
    SF_CI_GIT_BRANCH=${CIRRUS_BRANCH:-}
    [[ "${SF_CI_IS_PR}" != "true" ]] || SF_CI_GIT_BRANCH=${CIRRUS_BASE_BRANCH:-}
    SF_CI_GIT_TAG=${CIRRUS_TAG:-}

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
}

function sf_ci_printvars_cirrus() {
    printenv | grep \
        -e "^CI[=_]" \
        -e "^CIRRUS[=_]" \
        -e "^CONTINUOUS_INTEGRATION$" \
        -e "^GITHUB_CHECK_SUITE_ID$"
}

function sf_ci_known_env_cirrus() {
    # see https://cirrus-ci.org/guide/writing-tasks/#environment-variables
    cat <<EOF
CI
CIRRUS_CI
CI_NODE_INDEX
CI_NODE_TOTAL
CONTINUOUS_INTEGRATION
CIRRUS_API_CREATED
CIRRUS_BASE_BRANCH
CIRRUS_BASE_SHA
CIRRUS_BRANCH
CIRRUS_BUILD_ID
CIRRUS_CHANGE_IN_REPO
CIRRUS_CHANGE_MESSAGE
CIRRUS_CHANGE_TITLE
CIRRUS_CRON
CIRRUS_DEFAULT_BRANCH
CIRRUS_LAST_GREEN_BUILD_ID
CIRRUS_LAST_GREEN_CHANGE
CIRRUS_PR
CIRRUS_PR_DRAFT
CIRRUS_TAG
CIRRUS_OS
CIRRUS_TASK_NAME
CIRRUS_TASK_ID
CIRRUS_RELEASE
CIRRUS_REPO_CLONE_TOKEN
CIRRUS_REPO_NAME
CIRRUS_REPO_OWNER
CIRRUS_REPO_FULL_NAME
CIRRUS_REPO_CLONE_URL
CIRRUS_USER_COLLABORATOR
CIRRUS_USER_PERMISSION
CIRRUS_HTTP_CACHE_HOST
GITHUB_CHECK_SUITE_ID
CIRRUS_ENV
CIRRUS_CLONE_DEPTH
CIRRUS_CLONE_SUBMODULES
CIRRUS_LOG_TIMESTAMP
CIRRUS_SHELL
CIRRUS_VOLUME
CIRRUS_WORKING_DIR
EOF
    # undocumented but observed
    cat <<EOF
CIRRUS_ARCH
CIRRUS_COMMIT_MESSAGE
CIRRUS_CPU
CIRRUS_REPO_CLONE_HOST
CIRRUS_REPO_ID
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_codeship() {
    [[ "${CI_NAME:-}" = "codeship" ]] || return 0

    export CI=true
    SF_CI_NAME=codeship
    SF_CI_PLATFORM=codeship
    SF_CI_SERVER_HOST=codeship.com
    # SF_CI_REPO_SLUG=${?????????????????}/${CI_REPO_NAME}
    # SF_CI_REPO_SLUG=$(git remote -v 2>/dev/null | grep -oP "(?<=.com.).+" | grep -oP ".+(?= \(fetch\))" | head -n1 | sed "s/.git$//") # editorconfig-checker-disable-line
    SF_CI_REPO_SLUG=${CI_REPO_NAME:-}
    SF_CI_ROOT= # TODO

    SF_CI_IS_CRON= # TODO
    SF_CI_IS_PR=
    # codeship set SF_CI_PR_NUMBER=0 for non-PR executions...
    [[ -z "${CI_PR_NUMBER:-}" ]] || [[ "${CI_PR_NUMBER:-}" = "0" ]] || SF_CI_IS_PR=true
    [[ -z "${CI_PULL_REQUEST:-}" ]] || [[ "${CI_PR_NUMBER:-}" = "0" ]] || SF_CI_IS_PR=true

    SF_CI_JOB_ID=${CI_BUILD_ID_:-}
    SF_CI_PIPELINE_ID=${CI_BUILD_NUMBER:-}
    SF_CI_JOB_URL=https://app.codeship.com/projects/${CI_PROJECT_ID:-}/builds/${SF_CI_JOB_ID}
    SF_CI_PIPELINE_URL=${CI_BUILD_URL:-}

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        # SF_CI_PR_URL=https://github.com/${CI_REPO_SLUG}/pull/${CI_PR_NUMBER:-}
        SF_CI_PR_URL=${CI_PULL_REQUEST:-}
        SF_CI_PR_REPO_SLUG= # TODO
        SF_CI_PR_GIT_HASH= # TODO
        SF_CI_PR_GIT_BRANCH= # TODO
    }

    SF_CI_GIT_HASH=${CI_COMMIT_ID:-}
    SF_CI_GIT_BRANCH=${CI_BRANCH:-}
    SF_CI_GIT_TAG= # TODO

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
}

function sf_ci_printvars_codeship() {
    printenv | grep \
        -e "^CI[=_]"
}

function sf_ci_known_env_codeship() {
    # see https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables
    cat <<EOF
CI
CI_BRANCH
CI_BUILD_APPROVED
CI_BUILD_ID
CI_COMMITTER_EMAIL
CI_COMMITTER_NAME
CI_COMMITTER_USERNAME
CI_COMMIT_DESCRIPTION
CI_COMMIT_ID
CI_COMMIT_MESSAGE
CI_NAME
CI_PROJECT_ID
CI_REPO_NAME
CI_STRING_TIME
CI_TIMESTAMP
CI_PR_NUMBER
CI_PULL_REQUEST
EOF
    # undocumented but observed
    cat <<EOF
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_github() {
    [[ "${GITHUB_ACTIONS:-}" = "true" ]] || return 0

    export CI=true
    SF_CI_NAME="GitHub Actions"
    SF_CI_PLATFORM=github
    SF_CI_SERVER_HOST=${GITHUB_SERVER_URL:-github.com}
    SF_CI_SERVER_HOST=${SF_CI_SERVER_HOST#*://}
    SF_CI_REPO_SLUG=${GITHUB_REPOSITORY}
    SF_CI_ROOT=${GITHUB_WORKSPACE:-}

    SF_CI_IS_CRON=
    [[ -n "${GITHUB_EVENT_NAME:-}" ]] || SF_CI_IS_CRON=true
    SF_CI_IS_PR=
    [[ "${GITHUB_EVENT_NAME:-}" != "pull_request" ]] || SF_CI_IS_PR=true

    SF_CI_JOB_ID=$(${SUPPORT_FIRECLOUD_DIR}/bin/github-get-job-id)
    SF_CI_PIPELINE_ID=${GITHUB_RUN_ID:-}
    # SF_CI_JOB_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks?check_suite_id=FIXME"
    SF_CI_JOB_URL="${GITHUB_SERVER_URL:-}/${SF_CI_REPO_SLUG}/runs/${SF_CI_JOB_ID}?check_suite_focus=true"
    SF_CI_PIPELINE_URL="${GITHUB_SERVER_URL:-}/${SF_CI_REPO_SLUG}/actions/runs/${SF_CI_PIPELINE_ID}"

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_PR_URL=$(jq -r .github.event.pull_request.url ${GITHUB_EVENT_PATH})
        SF_CI_PR_REPO_SLUG=$(jq -r .github.event.pull_request.head.repo.full_name ${GITHUB_EVENT_PATH})
        SF_CI_PR_GIT_HASH=$(jq -r .github.event.pull_request.head.sha ${GITHUB_EVENT_PATH})
        SF_CI_PR_GIT_BRANCH=$(jq -r .github.event.pull_request.head.ref ${GITHUB_EVENT_PATH})
    }

    SF_CI_GIT_HASH=${GITHUB_SHA:-}
    SF_CI_GIT_BRANCH=
    [[ ! "${GITHUB_REF:-}" =~ ^refs/heads/ ]] || SF_CI_GIT_BRANCH=${GITHUB_REF#refs/heads/}
    SF_CI_GIT_TAG=
    [[ ! "${GITHUB_REF:-}" =~ ^refs/tags/ ]] || SF_CI_GIT_TAG=${GITHUB_REF#refs/tags/}

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
}

function sf_ci_printvars_github() {
    printenv | grep \
        -e "^CI[=_]" \
        -e "^GITHUB[=_]" \
        -e "^RUNNER[=_]"
}

function sf_ci_known_env_github() {
    # see https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables
    cat <<EOF
CI
GITHUB_WORKFLOW
GITHUB_RUN_ID
GITHUB_RUN_NUMBER
GITHUB_JOB
GITHUB_ACTION
GITHUB_ACTION_PATH
GITHUB_ACTIONS
GITHUB_ACTOR
GITHUB_REPOSITORY
GITHUB_EVENT_NAME
GITHUB_EVENT_PATH
GITHUB_WORKSPACE
GITHUB_SHA
GITHUB_REF
GITHUB_HEAD_REF
GITHUB_BASE_REF
GITHUB_SERVER_URL
GITHUB_API_URL
GITHUB_GRAPHQL_URL
RUNNER_OS
RUNNER_TEMP
RUNNER_TOOL_CACHE
EOF
    # undocumented but observed
    cat <<EOF
GITHUB_ACTION_REF
GITHUB_ACTION_REPOSITORY
GITHUB_ENV
GITHUB_JOB_NAME
GITHUB_PATH
GITHUB_REPOSITORY_OWNER
GITHUB_RETENTION_DAYS
GITHUB_TOKEN
RUNNER_PERFLOG
RUNNER_TRACKING_ID
RUNNER_USER
RUNNER_WORKSPACE
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_gitlab() {
    [[ "${GITLAB_CI:-}" = "true" ]] || return 0

    # TODO handle external_pull_request_event
    [[ "${CI_PIPELINE_SOURCE:-}" != "external_pull_request_event" ]]

    export CI=true
    SF_CI_NAME="GitLab CI/CD"
    SF_CI_PLATFORM=gitlab
    SF_CI_SERVER_HOST=${CI_SERVER_HOST:-gitlab.com}
    SF_CI_REPO_SLUG=${CI_PROJECT_PATH:-}
    SF_CI_ROOT=${CI_PROJECT_DIR:-}

    SF_CI_IS_CRON=
    [[ "${CI_PIPELINE_SOURCE:-}" != "schedule" ]] || SF_CI_IS_CRON=true
    SF_CI_IS_PR=
    [[ -z "${CI_MERGE_REQUEST_ID:-}" ]] || SF_CI_IS_PR=true

    # 1 pipeline -> n jobs
    SF_CI_JOB_ID=${CI_JOB_ID:-}
    SF_CI_PIPELINE_ID=${CI_PIPELINE_ID:-}
    SF_CI_JOB_URL=${CI_JOB_URL:-}
    SF_CI_PIPELINE_URL=${CI_PIPELINE_URL:-${CI_PROJECT_URL:-}/-/pipelines/${SF_CI_PIPELINE_ID}}

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_PR_URL=${CI_PROJECT_URL:-}/-/merge_requests/${CI_MERGE_REQUEST_ID:-}
        SF_CI_PR_REPO_SLUG=${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH:-}
        SF_CI_PR_GIT_HASH=${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-}
        SF_CI_PR_GIT_BRANCH=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:-}
    }

    SF_CI_GIT_HASH=${CI_COMMIT_SHA:-}
    SF_CI_GIT_BRANCH=${CI_COMMIT_REF_NAME:-}
    [[ "${SF_CI_IS_PR}" != "true" ]] || SF_CI_GIT_BRANCH=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-}
    SF_CI_GIT_TAG=${CI_COMMIT_TAG:-}

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
}

function sf_ci_printvars_gitlab() {
    printenv | grep \
        -e "^CHAT[=_]" \
        -e "^CI[=_]" \
        -e "^GITLAB[=_]" \
        -e "^TRIGGER_PAYLOAD="
}

function sf_ci_known_env_gitlab() {
    # see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    cat <<EOF
CHAT_CHANNEL
CHAT_INPUT
CI
CI_API_V4_URL
CI_BUILDS_DIR
CI_COMMIT_AUTHOR
CI_COMMIT_BEFORE_SHA
CI_COMMIT_BRANCH
CI_COMMIT_DESCRIPTION
CI_COMMIT_MESSAGE
CI_COMMIT_REF_NAME
CI_COMMIT_REF_PROTECTED
CI_COMMIT_REF_SLUG
CI_COMMIT_SHA
CI_COMMIT_SHORT_SHA
CI_COMMIT_TAG
CI_COMMIT_TIMESTAMP
CI_COMMIT_TITLE
CI_CONCURRENT_ID
CI_CONCURRENT_PROJECT_ID
CI_CONFIG_PATH
CI_DEBUG_TRACE
CI_DEFAULT_BRANCH
CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX
CI_DEPENDENCY_PROXY_PASSWORD
CI_DEPENDENCY_PROXY_SERVER
CI_DEPENDENCY_PROXY_USER
CI_DEPLOY_FREEZE
CI_DEPLOY_PASSWORD
CI_DEPLOY_USER
CI_DISPOSABLE_ENVIRONMENT
CI_ENVIRONMENT_NAME
CI_ENVIRONMENT_SLUG
CI_ENVIRONMENT_URL
CI_ENVIRONMENT_ACTION
CI_ENVIRONMENT_TIER
CI_HAS_OPEN_REQUIREMENTS
CI_JOB_ID
CI_JOB_IMAGE
CI_JOB_JWT
CI_JOB_MANUAL
CI_JOB_NAME
CI_JOB_STAGE
CI_JOB_STATUS
CI_JOB_TOKEN
CI_JOB_URL
CI_JOB_STARTED_AT
CI_KUBERNETES_ACTIVE
CI_NODE_INDEX
CI_NODE_TOTAL
CI_OPEN_MERGE_REQUESTS
CI_PAGES_DOMAIN
CI_PAGES_URL
CI_PIPELINE_ID
CI_PIPELINE_IID
CI_PIPELINE_SOURCE
CI_PIPELINE_TRIGGERED
CI_PIPELINE_URL
CI_PIPELINE_CREATED_AT
CI_PROJECT_CONFIG_PATH
CI_PROJECT_DIR
CI_PROJECT_ID
CI_PROJECT_NAME
CI_PROJECT_NAMESPACE
CI_PROJECT_PATH_SLUG
CI_PROJECT_PATH
CI_PROJECT_REPOSITORY_LANGUAGES
CI_PROJECT_ROOT_NAMESPACE
CI_PROJECT_TITLE
CI_PROJECT_URL
CI_PROJECT_VISIBILITY
CI_PROJECT_CLASSIFICATION_LABEL
CI_REGISTRY_IMAGE
CI_REGISTRY_PASSWORD
CI_REGISTRY_USER
CI_REGISTRY
CI_REPOSITORY_URL
CI_RUNNER_DESCRIPTION
CI_RUNNER_EXECUTABLE_ARCH
CI_RUNNER_ID
CI_RUNNER_REVISION
CI_RUNNER_SHORT_TOKEN
CI_RUNNER_TAGS
CI_RUNNER_VERSION
CI_SERVER_HOST
CI_SERVER_NAME
CI_SERVER_PORT
CI_SERVER_PROTOCOL
CI_SERVER_REVISION
CI_SERVER_URL
CI_SERVER_VERSION_MAJOR
CI_SERVER_VERSION_MINOR
CI_SERVER_VERSION_PATCH
CI_SERVER_VERSION
CI_SERVER
CI_SHARED_ENVIRONMENT
GITLAB_CI
GITLAB_FEATURES
GITLAB_USER_EMAIL
GITLAB_USER_ID
GITLAB_USER_LOGIN
GITLAB_USER_NAME
TRIGGER_PAYLOAD
EOF
    # undocumented but observed
    cat <<EOF
CI_BUILD_BEFORE_SHA
CI_BUILD_ID
CI_BUILD_NAME
CI_BUILD_REF
CI_BUILD_REF_NAME
CI_BUILD_REF_SLUG
CI_BUILD_STAGE
CI_BUILD_TOKEN
CI_SERVER_TLS_CA_FILE
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_semaphore() {
    [[ "${SEMAPHORE:-}" = "true" ]] || return 0

    export CI=true
    SF_CI_NAME=Semaphore
    SF_CI_PLATFORM=semaphore
    SF_CI_SERVER_HOST=${SEMAPHORE_ORGANIZATION_URL:-semaphoreci.com}
    SF_CI_SERVER_HOST=${SF_CI_SERVER_HOST#*://}
    SF_CI_REPO_SLUG=${SEMAPHORE_GIT_REPO_SLUG:-}
    SF_CI_ROOT=${SEMAPHORE_GIT_DIR:-}

    SF_CI_IS_CRON=${SEMAPHORE_WORKFLOW_TRIGGERED_BY_SCHEDULE:-}
    SF_CI_IS_PR=
    [[ -z "${SEMAPHORE_GIT_PR_SLUG:-}" ]] || SF_CI_IS_PR=true

    SF_CI_JOB_ID=${SEMAPHORE_JOB_ID:-}
    SF_CI_PIPELINE_ID=${SEMAPHORE_WORKFLOW_ID:-}
    SF_CI_JOB_URL="${SEMAPHORE_ORGANIZATION_URL:-}/jobs/${SF_CI_JOB_ID}"
    SF_CI_PIPELINE_URL="${SEMAPHORE_ORGANIZATION_URL:-}/workflows/${SF_CI_PIPELINE_ID}"

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_PR_URL=https://github.com/${SF_CI_REPO_SLUG}/pull/${SEMAPHORE_GIT_PR_NUMBER:-}
        SF_CI_PR_REPO_SLUG=${SEMAPHORE_GIT_PR_SLUG:-}
        SF_CI_PR_GIT_HASH=${SEMAPHORE_GIT_PR_SHA:-}
        SF_CI_PR_GIT_BRANCH=${SEMAPHORE_GIT_PR_BRANCH:-}
    }

    SF_CI_GIT_HASH=${SEMAPHORE_GIT_SHA:-}
    SF_CI_GIT_BRANCH=${SEMAPHORE_GIT_BRANCH:-}
    SF_CI_GIT_TAG=${SEMAPHORE_GIT_TAG_NAME:-}

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
}

function sf_ci_printvars_semaphore() {
    printenv | grep \
        -e "^CI[=_]" \
        -e "^SEMAPHORE[=_]"
}

function sf_ci_known_env_semaphore() {
    # see https://docs.semaphoreci.com/ci-cd-environment/environment-variables/
    cat <<EOF
CI
SEMAPHORE
SEMAPHORE_PROJECT_NAME
SEMAPHORE_PROJECT_ID
SEMAPHORE_ORGANIZATION_URL
SEMAPHORE_JOB_NAME
SEMAPHORE_JOB_ID
SEMAPHORE_JOB_RESULT
SEMAPHORE_WORKFLOW_ID
SEMAPHORE_WORKFLOW_NUMBER
SEMAPHORE_WORKFLOW_RERUN
SEMAPHORE_WORKFLOW_TRIGGERED_BY_HOOK
SEMAPHORE_WORKFLOW_TRIGGERED_BY_SCHEDULE
SEMAPHORE_WORKFLOW_TRIGGERED_BY_API
SEMAPHORE_PIPELINE_ID
SEMAPHORE_PIPELINE_PROMOTION
SEMAPHORE_PIPELINE_PROMOTED_BY
SEMAPHORE_PIPELINE_RERUN
SEMAPHORE_AGENT_MACHINE_TYPE
SEMAPHORE_AGENT_MACHINE_OS_IMAGE
SEMAPHORE_AGENT_MACHINE_ENVIRONMENT_TYPE
SEMAPHORE_GIT_SHA
SEMAPHORE_GIT_URL
SEMAPHORE_GIT_BRANCH
SEMAPHORE_GIT_DIR
SEMAPHORE_GIT_REPO_SLUG
SEMAPHORE_GIT_REF_TYPE
SEMAPHORE_GIT_REF
SEMAPHORE_GIT_COMMIT_RANGE
SEMAPHORE_GIT_TAG_NAME
SEMAPHORE_GIT_PR_BRANCH
SEMAPHORE_GIT_PR_SLUG
SEMAPHORE_GIT_PR_SHA
SEMAPHORE_GIT_PR_NUMBER
SEMAPHORE_GIT_PR_NAME
SEMAPHORE_CACHE_USERNAME
SEMAPHORE_CACHE_URL
SEMAPHORE_CACHE_PRIVATE_KEY_PATH
SEMAPHORE_REGISTRY_USERNAME
SEMAPHORE_REGISTRY_PASSWORD
SEMAPHORE_REGISTRY_URL
EOF
    # undocumented but observed
    cat <<EOF
SEMAPHORE_ARTIFACT_TOKEN
SEMAPHORE_ERLANG_VERSION
SEMAPHORE_PIPELINE_0_ARTEFACT_ID
SEMAPHORE_PIPELINE_ARTEFACT_ID
SEMAPHORE_SCALA_VERSION
SEMAPHORE_WORKFLOW_HOOK_SOURCE
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_sourcehut() {
    [[ "${SF_CI_NAME:-}" = "sourcehut" ]] || return 0

    # TODO sourcehut hasn't been fully tested. narrowing the scope
    [[ "${BUILD_REASON}" = "github-commit" ]] # only github webhooks
    [[ "${GITHUB_EVENT}" = "push" ]] # only push
    [[ ${GITHUB_REF} =~ ^refs/heads/ ]] # only branches

    export CI=true # missing
    SF_CI_NAME=sourcehut
    SF_CI_PLATFORM=sourcehut
    SF_CI_SERVERT_HOST=sourcehut.org
    SF_CI_REPO_SLUG=
    SF_CI_ROOT=${HOME}

    SF_CI_IS_CRON=
    SF_CI_IS_PR= # TODO

    SF_CI_JOB_ID=${JOB_ID:-}
    SF_CI_PIPELINE_ID=${SF_CI_JOB_ID}
    SF_CI_JOB_URL=${JOB_URL:-}
    SF_CI_PIPELINE_URL=${SF_CI_JOB_URL}

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_PR_URL= # TODO
        SF_CI_PR_REPO_SLUG= # TODO
        SF_CI_PR_GIT_HASH= # TODO
        SF_CI_PR_GIT_BRANCH= # TODO
    }

    SF_CI_GIT_HASH= # TODO
    SF_CI_GIT_BRANCH # TODO
    SF_CI_GIT_TAG= # TODO

    SF_CI_DEBUG_MODE=${SF_CI_DEBUG_MODE:-}
}

function sf_ci_printvars_sourcehut() {
    # CI is actually missing
    printenv | grep \
        -e "^BUILD[=_]" \
        -e "^GITHUB[=_]" \
        -e "^JOB[=_]" \
        -e "^PATCHSET[=_]"
}

function sf_ci_known_env_sourcehut() {
    # see https://man.sr.ht/builds.sr.ht/
    cat <<EOF
JOB_ID
JOB_URL
BUILD_SUBMITTER
BUILD_REASON
BUILD_SUBMITTER
BUILD_REASON
PATCHSET_ID
PATCHSET_URL
EOF
    # undocumented but observed
    cat <<EOF
GITHUB_DELIVERY
GITHUB_EVENT
GITHUB_REF
GITHUB_REPO
EOF
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

function sf_ci_env_travis() {
    [[ "${TRAVIS:-}" = "true" ]] || return 0

    export CI=true
    SF_CI_NAME="Travis CI"
    SF_CI_PLATFORM=travis
    SF_CI_SERVER_HOST=travis-ci.org
    SF_CI_REPO_SLUG=${TRAVIS_REPO_SLUG:-}
    SF_CI_ROOT=${TRAVIS_BUILD_DIR:-}

    SF_CI_IS_CRON=
    [[ "${TRAVIS_EVENT_TYPE:-}" != "cron" ]] || SF_CI_IS_CRON=true
    SF_CI_IS_PR=
    [[ "${TRAVIS_EVENT_TYPE:-}" != "pull_request" ]] || SF_CI_IS_PR=true

    SF_CI_JOB_ID=${TRAVIS_JOB_ID:-}
    SF_CI_PIPELINE_ID=${TRAVIS_BUILD_NUMBER:-}
    SF_CI_JOB_URL=${TRAVIS_JOB_WEB_URL:-}
    SF_CI_PIPELINE_URL=${TRAVIS_BUILD_WEB_URL:-}

    SF_CI_PR_URL=
    SF_CI_PR_REPO_SLUG=
    SF_CI_PR_GIT_HASH=
    SF_CI_PR_GIT_BRANCH=
    [[ "${SF_CI_IS_PR}" != "true" ]] || {
        SF_CI_PR_URL=https://github.com/${SF_CI_REPO_SLUG}/pull/${TRAVIS_PULL_REQUEST:-}
        SF_CI_PR_REPO_SLUG=${TRAVIS_PULL_REQUEST_SLUG:-}
        SF_CI_PR_GIT_HASH=${TRAVIS_PULL_REQUEST_SHA:-}
        SF_CI_PR_GIT_BRANCH=${TRAVIS_PULL_REQUEST_BRANCH:-}
    }

    SF_CI_GIT_HASH=${TRAVIS_COMMIT:-}
    SF_CI_GIT_BRANCH=${TRAVIS_BRANCH:-}
    SF_CI_GIT_TAG=${TRAVIS_TAG:-}

    SF_CI_DEBUG_MODE=${TRAVIS_DEBUG_MODE:-}
}

function sf_ci_printvars_travis() {
    printenv | grep \
        -e "^CI[=_]" \
        -e "^CONTINUOUS_INTEGRATION$" \
        -e "^HAS_JOSH_K_SEAL_OF_APPROVAL$" \
        -e "^TRAVIS[=_]"
}

function sf_ci_known_env_travis() {
    # see https://docs-staging.travis-ci.com/user/environment-variables/#default-environment-variables
    cat <<EOF
CI
TRAVIS
CONTINUOUS_INTEGRATION
HAS_JOSH_K_SEAL_OF_APPROVAL
TRAVIS_ALLOW_FAILURE
TRAVIS_APP_HOST
TRAVIS_BRANCH
TRAVIS_BUILD_DIR
TRAVIS_BUILD_ID
TRAVIS_BUILD_NUMBER
TRAVIS_BUILD_WEB_URL
TRAVIS_COMMIT
TRAVIS_COMMIT_MESSAGE
TRAVIS_COMMIT_RANGE
TRAVIS_COMPILER
TRAVIS_DEBUG_MODE
TRAVIS_DIST
TRAVIS_EVENT_TYPE
TRAVIS_JOB_ID
TRAVIS_JOB_NAME
TRAVIS_JOB_NUMBER
TRAVIS_JOB_WEB_URL
TRAVIS_OS_NAME
TRAVIS_CPU_ARCH
TRAVIS_OSX_IMAGE
TRAVIS_PULL_REQUEST
TRAVIS_PULL_REQUEST_BRANCH
TRAVIS_PULL_REQUEST_SHA
TRAVIS_PULL_REQUEST_SLUG
TRAVIS_REPO_SLUG
TRAVIS_SECURE_ENV_VARS
TRAVIS_SUDO
TRAVIS_TEST_RESULT
TRAVIS_TAG
TRAVIS_BUILD_STAGE_NAME
TRAVIS_DART_VERSION
TRAVIS_GO_VERSION
TRAVIS_HAXE_VERSION
TRAVIS_JDK_VERSION
TRAVIS_JULIA_VERSION
TRAVIS_NODE_VERSION
TRAVIS_OTP_RELEASE
TRAVIS_PERL_VERSION
TRAVIS_PHP_VERSION
TRAVIS_PYTHON_VERSION
TRAVIS_R_VERSION
TRAVIS_RUBY_VERSION
TRAVIS_RUST_VERSION
TRAVIS_SCALA_VERSION
TRAVIS_MARIADB_VERSION
TRAVIS_XCODE_SDK
TRAVIS_XCODE_SCHEME
TRAVIS_XCODE_PROJECT
TRAVIS_XCODE_WORKSPACE
EOF
    # undocumented but observed
    cat <<EOF
EOF
}
for SF_CI_PRINTVAR_PLATFORM in  appveyor circle cirrus codeship github gitlab semaphore sourcehut travis; do
    eval "sf_ci_env_${SF_CI_PRINTVAR_PLATFORM}"
done

# cannot use printenv because variables are not exported
# printenv | grep "^CI[_=]"
compgen -A variable | sort -u | grep -e "^CI$" -e "^SF_CI_" | while read -r NO_XARGS_R; do
    [[ -n "${NO_XARGS_R}" ]] || continue;
    echo "${NO_XARGS_R}=${!NO_XARGS_R}"
done
