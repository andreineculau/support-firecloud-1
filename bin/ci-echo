#!/usr/bin/env bash
set -euo pipefail

SUPPORT_FIRECLOUD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source ${SUPPORT_FIRECLOUD_DIR}/sh/common.inc.sh

#- ci-echo 1.0
## Usage: ci-echo [OPTION] STEP TEXT...
## Echo message with a STEP indicator for stdout or for TeamCity/Travis consumption.
##
##   --benchmark    Benchmark file to use for benchmarking groups (DO-DONE durations).
##
##   -h, --help     Display this help and exit
##   -v, --version  Output version information and exit

BENCHMARK=/dev/null

while [[ $# -gt 0 ]]; do
    case "$1" in
        --benchmark)
            BENCHMARK=$2
            shift 2
            [[ -e ${BENCHMARK} ]] || {
                touch ${BENCHMARK}
                chmod a+rw ${BENCHMARK}
            }
            ;;
        -h|--help)
            sh_script_usage
            ;;
        -v|--version)
            sh_script_version
            ;;
        --)
            shift
            break
            ;;
        -*)
            sh_script_usage
            ;;
        *)
            break
            ;;
    esac
done
# [[ $# -ne 0 ]] || sh_script_usage

ANY_PYTHON=
ANY_PYTHON=${ANY_PYTHON:-$(command -v python 2>/dev/null | grep -e "^/")}
ANY_PYTHON=${ANY_PYTHON:-$(command -v python2 2>/dev/null | grep -e "^/")}
ANY_PYTHON=${ANY_PYTHON:-$(command -v python3 2>/dev/null | grep -e "^/")}
ANY_PYTHON=${ANY_PYTHON:-ANY_PYTHON_NOT_FOUND}

function fallback_echo() {
    case "$1" in
        "[DO  ]"|"[DONE]")
            local COLOR_DIM="\e[2m"
            local COLOR_RESET="\e[0m"

            [[ "${CI}" != "true" ]] || {
                COLOR_DIM=
                COLOR_RESET=
            }
            ;;
        *)
            ;;
    esac

    case $1 in
        "[DO  ]")
            >&2 echo
            >&2 echo -e "$(date +"%H:%M:%S") $1 ${GROUP}"
            >&2 echo -e "              ${COLOR_DIM}> ${PWD_GROUP}${COLOR_RESET}"
            >&2 echo
            ;;
        "[DONE]")
            >&2 echo
            >&2 echo -e "              ${COLOR_DIM}< ${PWD_GROUP}${COLOR_RESET}"
            >&2 echo -e "$(date +"%H:%M:%S") $1 ${GROUP}"
            >&2 echo -e "                in ${GROUP_DURATION} seconds"
            >&2 echo
            ;;
        *)
            >&2 echo "$(date +"%H:%M:%S") $1 ${GROUP}"
            ;;
    esac
}

function basic_travis_echo() {
    # local ANSI_RED="\033[31;1m"
    # local ANSI_GREEN="\033[32;1m"
    # local ANSI_RESET="\033[0m"
    local ANSI_CLEAR_LINE="\033[0K"

    local XTRACE_STATE="$(shopt -po xtrace || true)" # shopt exits with non zero?
    set +x
    echo -en "$*\\r${ANSI_CLEAR_LINE}"
    eval "${XTRACE_STATE}"
}

function travis_echo() {
    case $1 in
        "[DO  ]")
            >&2 echo
            basic_travis_echo "travis_fold:start:${PWD_GROUP}"
            basic_travis_echo "travis_time:start:${PWD_GROUP}"
            >&2 echo "$(date +"%H:%M:%S") $1 ${GROUP}"
            >&2 echo -e "              > ${PWD_GROUP}"
            >&2 echo
            ;;
        "[DONE]")
            >&2 echo
            >&2 echo -e "              < ${PWD_GROUP}"

            # 000000000 suffix means "in nanoseconds"
            basic_travis_echo "travis_time:end:${PWD_GROUP}:start=${GROUP_START}000000000,finish=${GROUP_FINISH}000000000,duration=${GROUP_DURATION}000000000"
            basic_travis_echo "travis_fold:end:${PWD_GROUP}"
            >&2 echo "$(date +"%H:%M:%S") $1 ${GROUP}"
            >&2 echo "$(date +"%H:%M:%S")        in ${GROUP_DURATION} seconds"
            >&2 echo
            ;;
        *)
            >&2 echo "$(date +"%H:%M:%S") $1 ${GROUP}"
            ;;
    esac
}

function github_actions_echo() {
    case $1 in
        "[DO  ]")
            >&2 echo
            >&2 echo -e "$(date +"%H:%M:%S") $1 ${GROUP}"
            # FIXME nesting doesn't work properly
            # see https://github.com/actions/runner/issues/802
            # echo "::group::${PWD_GROUP}"
            >&2 echo -e "              > ${PWD_GROUP}"
            >&2 echo
            ;;
        "[DONE]")
            >&2 echo
            >&2 echo -e "              < ${PWD_GROUP}"
            # FIXME nesting doesn't work properly
            # see https://github.com/actions/runner/issues/802
            # echo "::endgroup::"
            >&2 echo -e "$(date +"%H:%M:%S") $1 ${GROUP}"
            >&2 echo -e "                in ${GROUP_DURATION} seconds"
            >&2 echo
            ;;
        # "[WARN]")
        #     >&2 echo "$(date +"%H:%M:%S") $1 ${GROUP}"
        #     echo "::warning::${GROUP}"
        #     ;;
        # "[ERR ]")
        #     >&2 echo "$(date +"%H:%M:%S") $1 ${GROUP}"
        #     echo "::error::${GROUP}"
        #     ;;
        *)
            >&2 echo "$(date +"%H:%M:%S") $1 ${GROUP}"
            ;;
    esac
}

function basic_teamcity_echo() {
    local XTRACE_STATE="$(shopt -po xtrace || true)" # shopt exits with non zero?
    set +x
    echo "##teamcity[$*]"
    eval "${XTRACE_STATE}"
}

function teamcity_echo() {
    local MESSAGE="$(echo "${GROUP}" | sed "s/'/|'/")"
    local STATUS=NORMAL

    case "$1" in
        "[DO  ]"|"[DONE]")
            local PWD_MESSAGE="${REL_PWD} ${MESSAGE}"
            ;;
        *)
            ;;
    esac

    case $1 in
        "[NEXT]")
            echo "##teamcity[progressMessage '${MESSAGE}']"
            return 0
            ;;
        "[DO  ]")
            echo -n "${PWD_MESSAGE}" > /tmp/ci_echo_teamcity_block_${RANDOM}
            basic_teamcity_echo "blockOpened name='${PWD_MESSAGE}'"
            return 0
            ;;
        "[DONE]")
            [[ -n "${MESSAGE}" ]] || {
                # shellcheck disable=SC2012
                BLOCK_MARKER=$(ls -t /tmp/ci_echo_teamcity_block_* | head -n1 2>/dev/null)
                [[ ! -f ${BLOCK_MARKER} ]] || {
                    PWD_MESSAGE="$(cat ${BLOCK_MARKER})"
                    rm -f ${BLOCK_MARKER}
                }
            }
            basic_teamcity_echo "blockClosed name='${PWD_MESSAGE}'"
            echo
            return 0
            ;;
        "[SKIP]")
            STATUS=WARNING
            ;;
        "[WARN]")
            STATUS=WARNING
            ;;
        "[ERR ]")
            STATUS=ERROR
            ;;
        "[INFO]"|*)
            ;;
    esac

    echo "##teamcity[message text='${MESSAGE}' status='${STATUS}']"
}

GROUP="${*:2}"

case "$1" in
    "[DO  ]")
        GROUP_START=$(date +%s)
        REL_PWD=$(${ANY_PYTHON} -c "import os.path; print('%s' % os.path.relpath('$(pwd)', '${HOME}'))" 2>/dev/null || pwd)
        PWD_GROUP="$(echo "${REL_PWD} ${GROUP}" | tr "[:upper:]" "[:lower:]" | sed "s/[^a-z0-9]\{1,\}/-/g" | sed "s/^-//" | sed "s/-$//")"

        # GROUP_MARKER=/tmp/ci-echo-group-${PWD_GROUP}-${GROUP_START}_${RANDOM}
        GROUP_MARKER=/tmp/ci-echo-group-${GROUP_START}-${RANDOM}
        echo -en "${GROUP_START}\n${GROUP}\n${PWD_GROUP}" > ${GROUP_MARKER}
        ;;
    "[DONE]")
        REL_PWD=$(${ANY_PYTHON} -c "import os.path; print('%s' % os.path.relpath('$(pwd)', '${HOME}'))" 2>/dev/null || pwd)
        # PWD_GROUP_PREFIX="$(echo "${REL_PWD}" | tr "A-Z" "a-z" | sed "s/[^a-z0-9]\{1,\}/-/g" | sed "s/^-//" | sed "s/-$//")"

        GROUP_FINISH=$(date +%s)
        GROUP_START=${GROUP_FINISH}
        GROUP_DURATION=0

        [[ -n "${GROUP}" ]] || {
            # shellcheck disable=SC2012
            # GROUP_MARKER=$(ls -t /tmp/ci-echo-group-${PWD_GROUP_PREFIX}-* 2>/dev/null | head -n1 || true)
            GROUP_MARKER=$(ls -t /tmp/ci-echo-group-* 2>/dev/null | head -n1 || true)
            [[ ! -f ${GROUP_MARKER} ]] || {
                GROUP_START=$(cat ${GROUP_MARKER} | sed -n "1,1 p")
                GROUP=$(cat ${GROUP_MARKER} | sed -n "2,2 p")
                PWD_GROUP=$(cat ${GROUP_MARKER} | sed -n "3,3 p")
                GROUP_DURATION=$(( ${GROUP_FINISH} - ${GROUP_START} ))
                rm -f ${GROUP_MARKER}

                echo "${GROUP_START} ${GROUP_DURATION} ${PWD_GROUP}" >> ${BENCHMARK}
            }
        }

        [[ -n "${PWD_GROUP:-}" ]] || {
            >&2 echo "[ERR ] Looks like you've called 'ci-echo [DONE]' without calling 'ci-echo [DO  ]' first."
            exit 1
        }
        ;;
    *)
        ;;
esac

if [[ "${TRAVIS:-}" = "true" ]]; then
    travis_echo "$1" "${GROUP}"
elif [[ -n "${GITHUB_ACTIONS:-}" ]]; then
    github_actions_echo "$1" "${GROUP}"
elif [[ -n "${TEAMCITY_VERSION:-}" ]]; then
    teamcity_echo "$1" "${GROUP}"
else
    fallback_echo "$1" "${GROUP}"
fi
