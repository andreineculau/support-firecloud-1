name: CI
on:
  push:
    branches:
      - github* # github branches
      - master
    tags:
      - 'v*' # version tags
  pull_request:
    branches:
      - '**'
  schedule:
    - cron:  '0 0 * * *'

aliases:
  env: &env
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    SF_LOG_BOOTSTRAP: true
    SF_PRINTENV_BOOTSTRAP: ${{ secrets.SF_PRINTENV_BOOTSTRAP }}
    SF_TRANSCRYPT_PASSWORD: ${{ secrets.SF_TRANSCRYPT_PASSWORD }}
    V: ${{ secrets.V }}
  checkout: &checkout
    shell: bash
    run: |
      # NOTE inline of bin/github-checkout
      # KEEP IN SYNC!
      set -x

      # basic git config
      git config --global core.autocrlf false
      git config --global core.eol lf
      git config --global advice.detachedHead false

      # use https instead of everything else
      git config --global --add url."https://github.com/".insteadOf "git://github.com/"
      git config --global --add url."https://github.com/".insteadOf "git@github.com:"
      git config --global --add url."https://github.com/".insteadOf "github://"
      git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

      # use github token transparently
      BASE64="base64 --wrap 0"
      echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
      echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
      echo "" | ${BASE64} >/dev/null 2>&1
      GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
      git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

      # use git protocol version 2 if available
      ! git config --help | grep -q "wire protocol version 2" || {
        git config --global --add protocol.version 2
        GIT_DEPTH_ARG="--depth=1"
      }

      # ------------------------------------------------------------------------------

      # clone/fetch

      GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
      if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
        GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
      elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
        GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
      fi
      cd ${GITHUB_WORKSPACE}
      git clone --progress ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
      if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
        git fetch --progress ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
        GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
        GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
      fi

      # ------------------------------------------------------------------------------

      # checkout
      if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
        git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
      elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
        git checkout ${GITHUB_REF}
      else
        set -x
        printenv
        cat ${GITHUB_EVENT_PATH}
        exit 1
      fi

      # submodules
      git submodule sync --recursive
      git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}

# ------------------------------------------------------------------------------

jobs:
  main:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          # deprecated in https://github.com/actions/virtual-environments/issues/3287
          # - ubuntu-16.04
          - ubuntu-18.04
          - ubuntu-20.04
          - macos-10.15
          - macos-11.0
        sf_ci_brew_install:
          - minimal
          - dev
    name: main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}
    runs-on: ${{ matrix.os }}
    env:
      <<: *env
      GITHUB_JOB_NAME: main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}
      SF_CI_BREW_INSTALL: ${{ matrix.sf_ci_brew_install }}
    steps: &steps
      - *checkout

      - shell: bash
        run: ./.ci.sh before_install

      - shell: bash
        run: ./.ci.sh install

      - shell: bash
        run: ./.ci.sh before_script

      - shell: bash
        run: ./.ci.sh script

      - if: failure()
        shell: bash
        run: ./.ci.sh after_failure || true

      - shell: bash
        run: ./.ci.sh after_success || true

      - if: always()
        shell: bash
        run: ./.ci.sh after_script || true

      - if: always()
        shell: bash
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: cloud-ci
          CI_STATUS: ${{ job.status }}
        run: ./.ci.sh notifications || true

# ------------------------------------------------------------------------------

  main-windows:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
        sf_ci_brew_install:
          - minimal
          # - dev # too time consuming
    name: main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}
    runs-on: ${{ matrix.os }}
    env:
      <<: *env
      GITHUB_JOB_NAME: main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}
      SF_CI_BREW_INSTALL: ${{ matrix.sf_ci_brew_install }}
      WSLENV: '${ENVSUBST_WSLENV}'
      WSLUSER: github
      WSLGROUP: github
    steps:
      - *checkout

      - name: Set up WSLENV
        shell: bash
        run: |
          set -x
          GITHUB_WSLENV="$(printenv | grep "^GITHUB" | cut -d"=" -f1 | sort | \
          sed "s|^GITHUB_ENV\$|GITHUB_ENV/p|" | \
          sed "s|^GITHUB_EVENT_PATH\$|GITHUB_EVENT_PATH/p|" | \
          sed "s|^GITHUB_PATH\$|GITHUB_PATH/p|" | \
          sed "s|^GITHUB_WORKSPACE\$|GITHUB_WORKSPACE/p|" | \
          tr "\n" ":")"
          echo "WSLENV=${WSLENV:-}:${GITHUB_WSLENV}" >> ${GITHUB_ENV}
      - name: Install WSL Distribution
        uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-18.04
          update: "false"
      - name: Set up WSL Distribution
        shell: bash
        run: |
          set -x
          wsl bash -c "cat /etc/os-release"
          wsl bash -c "sudo addgroup --gid 2000 ${WSLGROUP}"
          wsl bash -c "sudo adduser --uid 2000 --ingroup ${WSLGROUP} --home /home/${WSLUSER} --shell /bin/bash --disabled-password --gecos \"Linux user\" ${WSLUSER}" # editorconfig-checker-disable-line
          wsl bash -c "sudo adduser ${WSLUSER} sudo"
          wsl bash -c "sudo echo \"${WSLUSER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers"
          # Use wsl.conf to fix error: chmod on .git/config.lock failed: Operation not permitted
          # See https://gist.github.com/shakahl/8b6c969768b3a54506c0fc4905d729a0
          wsl bash -c "sudo cp priv/wsl.conf /etc/wsl.conf && sudo chmod 0644 /etc/wsl.conf"

      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh before_install"

      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh install"

      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh before_script"

      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh script"

      - if: always()
        shell: bash
        run: bin/wsl-bash -c "./.ci.sh after_failure || true"

      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh after_success || true"

      - if: always()
        shell: bash
        run: bin/wsl-bash -c "./.ci.sh after_script || true"

      - if: always()
        shell: bash
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: cloud-ci
          CI_STATUS: ${{ job.status }}
        run: bin/wsl-bash -c "./.ci.sh notifications || true"

# ------------------------------------------------------------------------------

  deploy-container-minimal:
    if: startsWith(github.ref, 'refs/tags/')
    needs: main-container
    strategy:
      fail-fast: false
      matrix:
        container: &deploy-matrix-container
          - sf-arch-0
          - sf-alpine-3.11.7
          - sf-centos-8
          - sf-debian-9
          - sf-debian-10
          - sf-ubuntu-16.04
          - sf-ubuntu-18.04
          - sf-ubuntu-20.04
        sf_ci_brew_install: &deploy-matrix-sf-ci-brew-install
          - minimal
          # - common
    name: deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}
    runs-on: ubuntu-latest
    env: &deploy-env
      <<: *env
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      GITHUB_JOB_NAME: deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}
      GITHUB_MATRIX_CONTAINER: ${{ matrix.container }}
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: ${{ matrix.sf_ci_brew_install }}
    steps: &deploy-steps
      - *checkout
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true

  deploy-container-common:
    if: startsWith(github.ref, 'refs/tags/')
    needs: deploy-container-minimal
    strategy:
      fail-fast: false
      matrix:
        container: *deploy-matrix-container
        sf_ci_brew_install:
          # - minimal
          - common
    name: deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}
    runs-on: ubuntu-latest
    env: *deploy-env
    steps: *deploy-steps

  main-container:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container: *deploy-matrix-container
        sf_ci_brew_install:
          - minimal
          - common
    name: mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}
    runs-on: ubuntu-latest
    env:
      <<: *deploy-env
      GITHUB_JOB_NAME: mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}
      SF_DEPLOY_DRYRUN: true
    steps: *deploy-steps
